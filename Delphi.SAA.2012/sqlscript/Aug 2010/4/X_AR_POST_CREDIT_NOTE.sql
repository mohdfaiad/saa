CREATE PROCEDURE X_AR_POST_CREDIT_NOTE (
    ADOC_NO VARCHAR(15),
    ADOC_DATE TIMESTAMP,
    ADEBTOR VARCHAR(10),
    AUPDATE_USER VARCHAR(10),
    AMODE VARCHAR(2))
AS
DECLARE VARIABLE CURRENCY_CODE VARCHAR(10);
DECLARE VARIABLE DEBTOR_TYPE VARCHAR(10);
DECLARE VARIABLE FYEAR INTEGER;
DECLARE VARIABLE FOUND_RECORD INTEGER;
DECLARE VARIABLE FMONTH INTEGER;
DECLARE VARIABLE TAX DOUBLE PRECISION;
DECLARE VARIABLE AMOUNT DOUBLE PRECISION;
DECLARE VARIABLE GRAND_TOTAL DOUBLE PRECISION;
DECLARE VARIABLE INVOICE_NO VARCHAR(15);
DECLARE VARIABLE INVOICE_DATE TIMESTAMP;
DECLARE VARIABLE DESCS VARCHAR(60);
DECLARE VARIABLE TRX_TYPE VARCHAR(2);
DECLARE VARIABLE REQUIRE_REFERENCE VARCHAR(1);
DECLARE VARIABLE ORDER_NO VARCHAR(15);
DECLARE VARIABLE ORDER_DATE TIMESTAMP;
DECLARE VARIABLE CLASS VARCHAR(1);
DECLARE VARIABLE DRCR VARCHAR(1);
BEGIN
  /* AR INVOICE POST ACTION
     ACTION INSERT DATA INOT AL_LEDGER AND UPDATE STATUS IN AR_INVOICE_HEADER
   */

    select count(*)
   FROM AR_CREDIT_NOTE_DT d ,ar_CREDIT_NOTE_HD h
  WHERE  d.debtor_acct = h.debtor_acct
  and d.doc_no = h.doc_no
  and d.doc_date = h.doc_date
  and  h.DEBTOR_ACCT = :aDEBTOR
  and h.DOC_NO    = :aDOC_NO
  and h.DOC_DATE  = :aDOC_DATE
  and h.status ='N'
  into :FOUND_RECORD  ;
  if (found_record =0) then
  begin
    exception e_no_row;
    exit;
  end
  FYEAR = extract(YEAR FROM aDOC_DATE);
  FMONTH = EXTRACT(MONTH FROM aDOC_DATE);

  SELECT   DEBTOR_TYPE ,CURRENCY_CODE
  FROM AR_DEBTOR
  WHERE DEBTOR_ACCT = :aDEBTOR
  INTO  :DEBTOR_TYPE,:CURRENCY_CODE ;
  IF (AMODE ='CR' ) THEN
  BEGIN
  CLASS ='C'  ;
  DRCR ='D';
  END
  ELSE
  BEGIN
  CLASS ='D'   ;
  DRCR ='C' ;
  END

  FOR SELECT SUM(D.base_amount),SUM(D.tax_amount),SUM(D.total_amount),COUNT(h.DEBTOR_ACCT) ,
  D.invoice_no,D.INVOICE_DATE ,max(h.descs) ,MAX(H.trx_type),MAX(D.invoice_no),MAX(D.INVOICE_DATE)
  FROM AR_CREDIT_NOTE_DT d ,ar_CREDIT_NOTE_HD h
  WHERE  d.debtor_acct = h.debtor_acct
  and d.doc_no = h.doc_no
  and d.doc_date = h.doc_date
  and  h.DEBTOR_ACCT = :aDEBTOR
  and h.DOC_NO    = :aDOC_NO
  and h.DOC_DATE  = :aDOC_DATE
  and h.status ='N'
  GROUP BY   h.DEBTOR_ACCT,h.DOC_NO,h.DOC_DATE   ,d.INVOICE_NO,d.INVOICE_DATE
  INTO :AMOUNT,:TAX,:GRAND_TOTAL,:FOUND_RECORD,:INVOICE_NO,:INVOICE_date ,:descs  ,:TRX_TYPE   ,
  :ORDER_NO ,:ORDER_DATE
  do
  begin
    IF (DRCR ='C') THEN
    BEGIN
      AMOUNT = (:AMOUNT*-1) ;
      TAX = (:TAX *-1);
      GRAND_TOTAL =(:GRAND_TOTAL*-1)  ;
    END
    INSERT INTO AR_LEDGER (
    DEBT_ACCT,DOC_NO, DOC_DATE,DEBTOR_ACCT,REF_NO,ref_date,FMONTH,DEBTOR_TYPE,TRX_TYPE,FYEAR,CURRENCY_CODE,CURRENCY_RATE ,MBASE_AMT,
    MTAX_AMT, MDOC_AMT,FBASE_AMT,FTAX_AMT, FDOC_AMT,MALLOC_AMT,FALLOC_AMT,MBAL_AMT, TAX_INV_NO ,CLASS,DR_CR_MODE,FBAL_AMT,
    BANK_CD, UPDATE_USER,UPDATE_DATE,DESCS)
    VALUES(
    :aDEBTOR,
    :aDOC_NO,
    :aDOC_DATE,
    :aDEBTOR,
    :INVOICE_no,
    :INVOICE_date,
    :FMONTH,
    :DEBTOR_TYPE,
    :TRX_TYPE,
    :FYEAR,
    :CURRENCY_CODE,
    0 ,
    :AMOUNT,
    :TAX,
    :GRAND_TOTAL,
    :AMOUNT,
    :TAX,
    :GRAND_TOTAL,
    0,
    0,
    :GRAND_TOTAL,
    :aDOC_NO,
    :CLASS,
    :DRCR,
    :GRAND_TOTAL,
    'NULL',
   :aupdate_user,
    CURRENT_TIMESTAMP,
    :descs
    );


     UPDATE AR_LEDGER LG
    SET  LG.malloc_amt = malloc_amt - :AMOUNT,
         LG.falloc_amt = falloc_amt -:AMOUNT ,
         LG.fbal_amt = FBAL_AMT + :AMOUNT  ,
         LG.mbal_amt = mBAL_AMT + :AMOUNT
    WHERE DOC_NO  =:INVOICE_NO
    AND DOC_DATE =:INVOICE_DATE ;

    UPDATE ar_credit_note_hd  SET STATUS = 'X'
    WHERE
    DEBTOR_ACCT = :aDEBTOR AND
    DOC_NO    = :aDOC_NO AND
     DOC_DATE  = :aDOC_DATE  and
     STATUS ='N' ;



   END

   suspend;


end
